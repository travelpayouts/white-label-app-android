package appconfig.parsers

import appconfig.GRADLE_TASK_NAME
import org.gradle.api.Project

object GoogleAdMobAppIdHandler {

    private const val PATH = "src/main/res/values/appodeal_config.xml"

    private const val GRADLE_PATH = "build.gradle.kts"

    private const val MANIFEST_PATH = "src/main/AndroidManifest.xml"

    private const val APPODEAL_WITH_ADMOB =
        "implementation(Tools.APPODEAL) { exclude(\"com.android.billingclient\", \"billing\") }"

    private const val APPODEAL_CORE = "implementation(Tools.APPODEAL_CORE)"

    private const val APPODEAL_WITHOUT_ADMOB = """
    implementation(Tools.APPODEAL_CORE)
    appodealNetworkWithoutAdmob()
    """

    private const val ADMOB_FULL_INFO =
        """    <property
            android:name="android.adservices.AD_SERVICES_CONFIG"
            android:resource="@xml/gma_ad_services_config"
            tools:replace="android:resource" />
        <meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="@string/google_admob_app_id" />
    </application>"""

    private val ADMOB_FULL_INFO_REGEX =
        """[ ]*<property[ ]*
            [ ]*android:name="android.adservices.AD_SERVICES_CONFIG"[ ]*
            [ ]*android:resource="@xml/gma_ad_services_config"[ ]*
            [ ]*tools:replace="android:resource" />[ ]*
        [ ]*<meta-data[ ]*
            [ ]*android:name="com.google.android.gms.ads.APPLICATION_ID"[ ]*
            [ ]*android:value="@string/google_admob_app_id" />[ ]*""".trimIndent().toRegex()

    /**
     * Create strings resource file with Advertising configs
     */
    private val template = """
        <?xml version="1.0" encoding="utf-8"?>
        <!--Do not modify. Generated by '$GRADLE_TASK_NAME' task-->
        <resources>
            <string name="google_admob_app_id" translatable="false">%s</string>
        </resources>
    """.trimIndent()

    fun handleAdmobConfig(
        appModule: Project,
        googleAdmobAppId: String,
        isAppodealKeyEmpty: Boolean
    ) {
        print("Generating advertising config strings.xml... ")

        handleAppodealGradleDeps(
            module = appModule,
            googleAdmobIsEmpty = googleAdmobAppId.isEmpty(),
            isAppodealKeyEmpty = isAppodealKeyEmpty
        )

        handleManifest(
            module = appModule,
            googleAdmobIsEmpty = googleAdmobAppId.isEmpty(),
            isAppodealKeyEmpty = isAppodealKeyEmpty
        )

        val appodealConfig = appModule.file(PATH)

        if (!appodealConfig.exists()) {
            appodealConfig.createNewFile()
        }

        appodealConfig.writeText(
            template.format(googleAdmobAppId)
        )

        println("âœ… ")
    }

    private fun handleAppodealGradleDeps(
        module: Project,
        googleAdmobIsEmpty: Boolean,
        isAppodealKeyEmpty: Boolean
    ) {
        val gradleFile = module.file(GRADLE_PATH)
        val gradleFileText = gradleFile.readText()

        val editedGradleText = when {
            isAppodealKeyEmpty -> {
                gradleFileText
                    .replace(APPODEAL_WITHOUT_ADMOB, APPODEAL_CORE)
                    .replace(APPODEAL_WITH_ADMOB, APPODEAL_CORE)
            }
            googleAdmobIsEmpty -> {
                gradleFileText
                    .replace(APPODEAL_CORE, APPODEAL_WITHOUT_ADMOB)
                    .replace(APPODEAL_WITH_ADMOB, APPODEAL_WITHOUT_ADMOB)
            }
            else -> {
                gradleFileText
                    .replace(APPODEAL_WITHOUT_ADMOB, APPODEAL_WITH_ADMOB)
                    .replace(APPODEAL_CORE, APPODEAL_WITH_ADMOB)
            }
        }

        gradleFile.writeText(editedGradleText)
    }

    private fun handleManifest(
        module: Project,
        googleAdmobIsEmpty: Boolean,
        isAppodealKeyEmpty: Boolean
    ) {
        val manifestFile = module.file(MANIFEST_PATH)
        val manifestFileText = manifestFile.readText()

        if (googleAdmobIsEmpty || isAppodealKeyEmpty) {
            val editedManifestText = manifestFileText.replace(ADMOB_FULL_INFO_REGEX, "")
            manifestFile.writeText(editedManifestText)
        } else {
            if (!manifestFileText.contains(ADMOB_FULL_INFO_REGEX)) {
                val editedManifestText = manifestFileText.replace("</application>", ADMOB_FULL_INFO)
                manifestFile.writeText(editedManifestText)
            }
        }
    }
}